version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@2.0.0
  aws-cli: circleci/aws-cli@1.2.1
  pocket: pocket/circleci-orbs@1.2.3

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  build_and_deploy:
    description: Builds and Optionaly deploys all the associated lambdas
    parameters:
      dir:
        type: string
        description: The lambda source directory
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
      codebuild_project_name:
        type: string
        description: The CodeBuild project name
        default: ""
      codebuild_project_branch:
        type: string
        description: The git branch to build
        default: ""
      deploy:
        type: boolean
        default: false
    docker:
      - image: circleci/node:14
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Package Lambda
          command: |
            cd << parameters.dir >>
            npm ci
            npm run build
            cp -r node_modules dist/
            cd dist
            zip -r9 "/tmp/$CIRCLE_SHA1.zip" *
            mkdir -p /tmp
            cp "/tmp/$CIRCLE_SHA1.zip" /tmp/build.zip
      - when:
          condition: << parameters.deploy >>
          steps:
            - aws-cli/setup:
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
            - run:
                name: Setup CodeBuild environment variables
                command: |
                  { \
                  echo 'export CODEBUILD_PROJECT_NAME="<< parameters.codebuild_project_name >>"'; \
                  echo 'export CODEBUILD_PROJECT_BRANCH="<< parameters.codebuild_project_branch >>"'; \
                  } >> "$BASH_ENV"
            - run:
                name: Run CodeBuild
                command: |
                  echo -e "Starting CodeBuild for ${CODEBUILD_PROJECT_NAME}.\n"
                  BUILD_ID=$(aws codebuild start-build --project-name "$CODEBUILD_PROJECT_NAME" --environment-variables-override name=GIT_BRANCH,value="$CODEBUILD_PROJECT_BRANCH" --source-version "$CODEBUILD_PROJECT_BRANCH" --query 'build.id' --output text)
                  BUILD_STATUS="IN_PROGRESS"
                  # Wait for the CodeBuild to complete.
                  while [ "$BUILD_STATUS" == "IN_PROGRESS" ]; do
                    sleep 10
                    echo "Checking build status"
                    BUILD_STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildStatus' --output text)
                    if [ "$BUILD_STATUS" == "IN_PROGRESS" ]; then
                      echo -e "Build is ${BUILD_STATUS}, waiting for build to complete...waiting for 10 seconds before next check...\n"
                    fi
                  done
                  if [ "$BUILD_STATUS" != "SUCCEEDED" ]; then
                    echo "CodeBuild failed to succeed with status ${BUILD_STATUS}"
                    exit 1
                  else
                    echo -e "CodeBuild succeeded\n"
                  fi
            - run:
                name: Upload Package
                command: aws s3 cp "/tmp/$CIRCLE_SHA1.zip" s3://pocket-fxawebhookproxy-<< parameters.env_lower_name >>-sqs-fxa-events/
            - pocket/deploy_lambda:
                s3-bucket: pocket-fxawebhookproxy-<< parameters.env_lower_name >>-sqs-fxa-events
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
                codedeploy-application-name: FxAWebhookProxy-<< parameters.env_capital_name >>-Sqs-FxA-Events-Lambda
                codedeploy-deployment-group-name: FxAWebhookProxy-<< parameters.env_capital_name >>-Sqs-FxA-Events-Lambda
                function-name: FxAWebhookProxy-<< parameters.env_capital_name >>-Sqs-FxA-Events-Function

      - store_artifacts:
          path: /tmp/build.zip

  # test_integrations:
  #   # Example for running integration tests using a docker container
  #   description: Run integration tests against external services, e.g. MySQL
  #   docker:
  #     # The application
  #     - image: circleci/node:16
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_PASSWORD
  #       environment:
  #         - NODE_ENV=test
  #         - AWS_XRAY_LOG_LEVEL=silent
  #         - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
  #     # Example for mysql 5.6 service
  #     - image: mysql:5.6
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_PASSWORD
  #       environment:
  #         MYSQL_ALLOW_EMPTY_PASSWORD: yes
  #         TZ: 'UTC'
  #     # Example for localstack
  #     - image: localstack/localstack
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_PASSWORD
  #       environment:
  #         DEBUG: 1
  #         # Put your localstack services here
  #         SERVICES: kinesis,firehose,sqs
  #         DATA_DIR: /tmp/localstack/data
  #         EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
  #         EXTRA_CORS_EXPOSE_HEADERS: ETag
  #         HOSTNAME_EXTERNAL: localstack
  #     # Example for snowplow service
  #     - image: pocket/snowplow-micro:prod
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_PASSWORD
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           # when lock file changes, use increasingly general patterns to restore cache
  #           # If this gets our of sync, you can increment the version (vX).  Just be
  #           # sure to match that version when saving the cache as well.
  #           - node-v1-{{ checksum "package-lock.json" }}
  #           - node-v1-
  #     - run:
  #         name: Authenticate with GitHub package registry
  #         command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
  #     - run:
  #         name: install node modules
  #         command: npm ci
  #     # Save the cache to avoid extraneous downloads
  #     - save_cache:
  #         key: node-v1-{{ checksum "package-lock.json" }}
  #         paths:
  #           - ./node_modules
  #     - run:
  #         # TODO: Update 
  #         name: run setup.sh
  #         command: |
  #           export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db --aws
  #     - run:
  #         name: run tests
  #         command: |
  #           export $(egrep -v '^#' .docker/local.env | xargs -0)
  #           npm run test-integrations  -- --ci --watchAll=false --forceExit

#  test_specs:
#    description: Run spec tests
#    docker:
#      - image: circleci/node:16
#        auth:
#          username: $DOCKERHUB_USERNAME
#          password: $DOCKERHUB_PASSWORD
#        environment:
#          NODE_ENV: test
#          AWS_XRAY_LOG_LEVEL: silent
#          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
#    steps:
#      - checkout
#      - restore_cache:
#          keys:
#            # when lock file changes, use increasingly general patterns to restore cache
#            # If this gets our of sync, you can increment the version (vX).  Just be
#            # sure to match that version when saving the cache as well.
#            - node-v1-{{ checksum "package-lock.json" }}
#            - node-v1-
#      - run:
#          name: Authenticate with GitHub package registry
#          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
#      - run:
#          name: install node modules
#          command: npm ci --cahce .npm
#      # Save the cache to avoid extraneous downloads
#      - save_cache:
#          key: node-v1-{{ checksum "package-lock.json" }}
#          paths:
#            - .npm
#      - run:
#          name: run tests
#          command: npm run test

workflows:
  all:
    jobs:
#      - test_specs:
#          <<: *not_main
#          context: pocket

      # - test_integrations:
      #     <<: *not_main
      #     context: pocket
      #     name: test_integrations

      # Try building the sqs lambda on each branch
      - build_and_deploy:
          <<: *not_dev_main
          context: pocket
          name: build_sqs_lambda
          dir: sqs_lambda
          env_lower_name: prod
          env_capital_name: Prod

      # Build & Deploy Development Lambdas
      - build_and_deploy:
          <<: *only_dev
          context: pocket
          name: deploy_sqs_lambda_dev
          dir: sqs_lambda
          codebuild_project_name: FxAWebhookProxy-Dev
          codebuild_project_branch: dev
          env_lower_name: dev
          env_capital_name: Dev
          deploy: true

      # Build & Deploy Production Lambdas
      - build_and_deploy:
          <<: *only_main
          context: pocket
          name: deploy_sqs_lambda_prod
          dir: sqs_lambda
          codebuild_project_name: FxAWebhookProxy-Prod
          codebuild_project_branch: main
          env_lower_name: prod
          env_capital_name: Prod
          deploy: true

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_sqs_lambda_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_sqs_lambda_dev
